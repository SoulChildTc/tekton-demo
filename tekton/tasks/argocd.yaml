#Source: https://hub.tekton.dev/tekton/task/argocd-task-sync-and-wait
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-env-configmap
  namespace: tekton-pipelines
data:
  ARGOCD_SERVER: argocd-server.argocd.svc.cluster.local
---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-env-secret
  namespace: tekton-pipelines
stringData:
  ARGOCD_USERNAME: admin
  ARGOCD_PASSWORD: rPeNKQ5Eq2yKHBet
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-task-sync-and-wait
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Deployment
    tekton.dev/tags: deploy
    tekton.dev/displayName: "argocd"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task syncs (deploys) an Argo CD application and waits for it to be healthy.

    To do so, it requires the address of the Argo CD server and some form of
    authentication either a username/password or an authentication token.
  results:
    - name: deploy-result
  params:
    - name: application-name
      description: name of the application to sync
    - name: revision
      description: the revision to sync to
      default: HEAD
    - name: flags
      default: '--'
    - name: argocd-image
      default: harbor.devops.soulchild.cn/devops/argocd:v2.3.1
  stepTemplate:
    envFrom:
      - configMapRef:
          name: argocd-env-configmap  # used for server address
      - secretRef:
          name: argocd-env-secret  # used for authentication (username/password or auth token)
  steps:
    - name: get-status
      image: $(params.argocd-image)
      script: |
        #!/bin/bash
        if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
          yes | argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD" --insecure;
        fi
        argocd app sync "$(params.application-name)" --revision "$(params.revision)" "$(params.flags)"
        argocd app wait "$(params.application-name)" --health "$(params.flags)"
        if [[ $? == 0 ]]; then
          printf "%s" yes | tee $(results.deploy-result.path)
        else
          argocd app rollback "$(params.application-name)"
          exit 1
        fi
